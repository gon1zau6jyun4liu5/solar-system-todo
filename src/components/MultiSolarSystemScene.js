import React, { useMemo, useState, useRef } from 'react';
import { Canvas, useFrame } from '@react-three/fiber';
import { OrbitControls } from '@react-three/drei';
import AISun from './AISun';
import AIPlanet from './AIPlanet';
import AISatellite from './AISatellite';
import Meteor from './Meteor';

/**
 * Enhanced Multi Solar System Scene v0.3.1
 * - Animation controls
 * - Meteor collision system
 * - Multiple solar systems with AI grouping
 * - Enhanced click interactions
 * - Progress percentage display
 */
const MultiSolarSystemScene = ({ 
  todoData = [], 
  onCelestialBodyClick,
  selectedTodoId = null,
  isAnimationPlaying = true
}) => {
  const [selectedSystemId, setSelectedSystemId] = useState(null);
  const [meteors, setMeteors] = useState([]);

  // Generate meteors for urgent todos
  const generateMeteorsForUrgentTodos = (todos) => {
    const urgentTodos = todos.filter(todo => 
      !todo.completed && 
      todo.visualProperties?.daysUntilDeadline <= 2
    );
    
    return urgentTodos.map((todo, index) => ({
      id: `meteor-${todo.id}`,
      todoData: todo,
      targetTodoId: todo.id,
      startPosition: [
        Math.random() * 100 - 50,
        Math.random() * 50 + 20,
        Math.random() * 100 - 50
      ],
      speed: 0.5 + Math.random() * 0.5
    }));
  };

  // Process and group todos by solar system with AI classification
  const solarSystems = useMemo(() => {
    if (!todoData.length) return [];

    // Group todos by AI-generated solar system ID
    const grouped = todoData.reduce((acc, todo) => {
      const systemId = todo.solarSystemId || `${todo.category}-general-system`;
      if (!acc[systemId]) {
        acc[systemId] = {
          id: systemId,
          category: todo.category,
          todos: []
        };
      }
      acc[systemId].todos.push(todo);
      return acc;
    }, {});

    // Organize by hierarchy within each system
    const systems = Object.values(grouped).map((system, index) => {
      const suns = system.todos.filter(todo => todo.hierarchyType === 'sun');
      const planets = system.todos.filter(todo => todo.hierarchyType === 'planet');
      const satellites = system.todos.filter(todo => todo.hierarchyType === 'satellite');

      return {
        ...system,
        suns: suns.length > 0 ? suns : [{ // Auto-create sun if none exists
          id: `auto-sun-${system.id}`,
          text: `${system.category.toUpperCase()} System Goals`,
          category: system.category,
          hierarchyType: 'sun',
          priority: 'high',
          completed: false,
          visualProperties: {
            sizeMultiplier: 1.5,
            brightness: 2.0,
            rotationSpeed: 0.005,
            urgencyColor: '#ffdd00'
          },
          solarSystemId: system.id,
          createdAt: new Date(),
          isAutoGenerated: true
        }],
        planets,
        satellites,
        totalTodos: system.todos.length,
        systemIndex: index
      };
    });

    return systems;
  }, [todoData]);

  // Generate meteors for urgent todos
  const activeMeteors = useMemo(() => {
    return generateMeteorsForUrgentTodos(todoData);
  }, [todoData]);

  // Calculate positions for multiple solar systems
  const systemPositions = useMemo(() => {
    const positions = [];
    const systemCount = solarSystems.length;
    const radius = Math.max(30, systemCount * 12);
    
    solarSystems.forEach((system, index) => {
      const angle = (index / systemCount) * Math.PI * 2;
      const x = Math.cos(angle) * radius;
      const z = Math.sin(angle) * radius;
      const y = (Math.random() - 0.5) * 8;
      
      positions.push({ 
        systemId: system.id, 
        position: [x, y, z] 
      });
    });
    
    return positions;
  }, [solarSystems]);

  const handleSystemClick = (systemId) => {
    setSelectedSystemId(systemId === selectedSystemId ? null : systemId);
  };

  const handleCelestialBodyClick = (todoData) => {
    onCelestialBodyClick?.(todoData);
  };

  // Calculate progress percentage for todos with deadlines
  const calculateProgressPercentage = (todo) => {
    if (!todo.deadline || !todo.createdAt) return null;
    
    const created = new Date(todo.createdAt);
    const deadline = new Date(todo.deadline);
    const now = new Date();
    
    const totalTime = deadline.getTime() - created.getTime();
    const remainingTime = deadline.getTime() - now.getTime();
    
    if (remainingTime <= 0) return 0; // Overdue
    if (totalTime <= 0) return 100; // Invalid dates
    
    return Math.max(0, Math.min(100, (remainingTime / totalTime) * 100));
  };

  return (
    <Canvas camera={{ position: [0, 50, 80], fov: 60 }}>
      {/* Enhanced lighting for multiple systems */}
      <ambientLight intensity={0.4} />
      <directionalLight position={[20, 20, 10]} intensity={0.6} />
      <pointLight position={[0, 30, 0]} intensity={0.4} color="#ffffff" />
      
      {/* Dynamic background starfield */}
      <mesh>
        <sphereGeometry args={[300, 64, 64]} />
        <meshBasicMaterial 
          color="#000015" 
          side={2}
          transparent
          opacity={0.9}
        />
      </mesh>

      {/* Render each solar system */}
      {solarSystems.map((system, systemIndex) => {
        const systemPos = systemPositions.find(p => p.systemId === system.id);
        const position = systemPos ? systemPos.position : [0, 0, 0];
        const isSelected = selectedSystemId === system.id;

        return (
          <group key={system.id} position={position}>
            
            {/* Render Suns (goals/objectives) */}
            {system.suns.map((sun, sunIndex) => (
              <AISun
                key={`sun-${sun.id}`}
                solarSystemData={system}
                position={[0, 0, 0]}
                onClick={() => handleSystemClick(system.id)}
                isSelected={isSelected}
                isAnimationPlaying={isAnimationPlaying}
                progressPercentage={calculateProgressPercentage(sun)}
              />
            ))}

            {/* Render Planets (projects) */}
            {system.planets.map((planet, planetIndex) => (
              <AIPlanet
                key={`planet-${planet.id}`}
                todoData={planet}
                sunPosition={[0, 0, 0]}
                orbitRadius={12 + planetIndex * 4}
                orbitSpeed={isAnimationPlaying ? (0.01 - planetIndex * 0.002) : 0}
                initialAngle={planetIndex * (Math.PI * 2) / system.planets.length}
                onClick={handleCelestialBodyClick}
                isSelected={selectedTodoId === planet.id}
                progressPercentage={calculateProgressPercentage(planet)}
              />
            ))}

            {/* Render Satellites (tasks) */}
            {system.satellites.map((satellite, satIndex) => {
              const planetCount = system.planets.length;
              if (planetCount > 0) {
                const planetIndex = satIndex % planetCount;
                const planet = system.planets[planetIndex];
                const planetOrbitRadius = 12 + planetIndex * 4;
                
                const planetAngle = planetIndex * (Math.PI * 2) / planetCount;
                const planetX = Math.cos(planetAngle) * planetOrbitRadius;
                const planetZ = Math.sin(planetAngle) * planetOrbitRadius;

                return (
                  <AISatellite
                    key={`satellite-${satellite.id}`}
                    todoData={satellite}
                    planetPosition={[planetX, 0, planetZ]}
                    orbitRadius={2 + (satIndex % 3) * 0.7}
                    orbitSpeed={isAnimationPlaying ? (0.04 + (satIndex % 5) * 0.01) : 0}
                    initialAngle={satIndex * 1.5}
                    onClick={handleCelestialBodyClick}
                    isSelected={selectedTodoId === satellite.id}
                    progressPercentage={calculateProgressPercentage(satellite)}
                  />
                );
              } else {
                return (
                  <AISatellite
                    key={`satellite-${satellite.id}`}
                    todoData={satellite}
                    planetPosition={[0, 0, 0]}
                    orbitRadius={6 + satIndex * 1.2}
                    orbitSpeed={isAnimationPlaying ? (0.03 + satIndex * 0.008) : 0}
                    initialAngle={satIndex * 1.2}
                    onClick={handleCelestialBodyClick}
                    isSelected={selectedTodoId === satellite.id}
                    progressPercentage={calculateProgressPercentage(satellite)}
                  />
                );
              }
            })}

            {/* System boundary indicator */}
            {isSelected && (
              <mesh>
                <ringGeometry args={[20, 22, 64]} />
                <meshBasicMaterial 
                  color="#00aaff" 
                  transparent 
                  opacity={0.3}
                  side={2}
                />
              </mesh>
            )}

            {/* System info label */}
            <group position={[0, -12, 0]}>
              <mesh>
                <planeGeometry args={[8, 1.5]} />
                <meshBasicMaterial 
                  color="#000000" 
                  transparent 
                  opacity={0.8} 
                />
              </mesh>
            </group>

          </group>
        );
      })}

      {/* Render Meteors for urgent todos */}
      {activeMeteors.map((meteor) => (
        <Meteor
          key={meteor.id}
          meteorData={meteor}
          targetTodos={todoData}
          isAnimationPlaying={isAnimationPlaying}
          onCollision={(meteorId, targetTodoId) => {
            console.log(`Meteor ${meteorId} collided with todo ${targetTodoId}`);
            // Handle collision effects
          }}
        />
      ))}

      {/* Enhanced camera controls */}
      <OrbitControls 
        enableDamping 
        dampingFactor={0.05}
        minDistance={15}
        maxDistance={300}
        maxPolarAngle={Math.PI * 0.8}
        minPolarAngle={Math.PI * 0.2}
      />

      {/* Performance monitor in development */}
      {process.env.NODE_ENV === 'development' && (
        <mesh position={[0, -30, 0]}>
          <planeGeometry args={[15, 3]} />
          <meshBasicMaterial color="#111111" transparent opacity={0.8} />
        </mesh>
      )}
    </Canvas>
  );
};

export default MultiSolarSystemScene;